<?php

use App\Domain\Event\EventRepositoryInterface;
use App\Domain\Event\ValueObjects\EventId;
use App\Domain\EventParty\EventParty;
use App\Domain\EventParty\EventPartyRepositoryInterface;
use App\Presentation\EventFacade;
use Tests\TestCase;

/**
 * Created by PhpStorm.
 * User: user
 * Date: 2018/02/04
 * Time: 11:23
 */


class EventFacadeTest extends TestCase
{
    /* @var EventRepositoryInterface $repo */
    protected $repo;
    /* @var EventPartyRepositoryInterface $eventPartyRepo */
    protected $eventPartyRepo;
    /* @var EventFacade $facade */
    protected $facade;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repo = app(EventRepositoryInterface::class);
        $this->eventPartyRepo = app(EventPartyRepositoryInterface::class);
        $this->facade = app(EventFacade::class);
    }

    public function testIssueEventSuccess()
    {
        $id = $this->facade->issueEvent(
            'MF',
            'oic',
            '作品展',
            '2020-01-01',
            '2020-02-01',
            '2020-01-02',
            '2020-01-15',
            '2020-01-16',
            '2020-01-30'
        );
        $eventId = new EventId($id);
        $result = $this->repo->findById($eventId);
        $this->assertTrue(isset($result));
    }

    public function testRanking()
    {
        $eventId = 'aaaa';
        $partyId = 'bbbb';
        $rank = 1;

        $this->eventPartyRepo->save(new EventParty(new EventId($eventId), $partyId));

        $this->facade->ranking($eventId, $partyId, $rank);

        $result = $this->eventPartyRepo->findByEventIdAndPartyId(new EventId($eventId), $partyId);

        $this->assertTrue($result->rank() === $rank);
    }
}
