<?php

use App\Domain\Event\ValueObjects\EventId;
use App\Domain\EventParty\EventParty;
use App\Domain\EventParty\EventPartyRepositoryInterface;
use App\Presentation\EventPartyFacade;
use Tests\TestCase;

/**
 * Created by PhpStorm.
 * User: user
 * Date: 2018/02/12
 * Time: 7:00
 */


class EventPartyFacadeTest extends TestCase
{
    /* @var EventPartyRepositoryInterface $repo */
    protected $repo;
    /* @var EventPartyFacade $facade */
    protected $facade;
    /* @var EventParty $eventParty */
    private $eventParty;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repo = app(EventPartyRepositoryInterface::class);
        $this->facade = app(EventPartyFacade::class);

        $this->eventParty = new EventParty(
            new EventId('aaaa'),
            'bbbb'
        );
    }

    public function testJoinEventSuccess()
    {
        $this->facade->joinEvent($this->eventParty->eventId()->code(), $this->eventParty->partyId());
        $result = $this->repo->findByEventIdAndPartyId($this->eventParty->eventId(), $this->eventParty->partyId());
        $this->assertTrue($result->eventId()->code() === $this->eventParty->eventId()->code() &&
            $result->partyId() === $this->eventParty->partyId());
    }

    public function testJoinEventFail()
    {
        $this->facade->joinEvent('aaaa', 'bbbb');

        $this->assertFalse($this->facade->joinEvent('aaaa', 'bbbb'));
    }
}
