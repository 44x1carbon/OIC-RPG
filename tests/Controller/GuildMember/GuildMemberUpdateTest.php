<?php


use App\ApplicationService\GuildMemberAppService;
use App\Domain\Course\RepositoryInterface\CourseRepositoryInterface;
use App\Domain\GuildMember\ValueObjects\StudentNumber;
use App\Domain\GuildMember\ValueObjects\Gender;
use App\Domain\GuildMember\ValueObjects\MailAddress;
use App\Domain\GuildMember\ValueObjects\LoginInfo;
use App\Domain\GuildMember\ValueObjects\PassWord;

class GuildMemberUpdateTest extends \Tests\TestCase
{
    /* @var GuildMemberAppService $guildMemberAppService*/
    protected $guildMemberAppService;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->guildMemberAppService = app(GuildMemberAppService::class);
        /* @var CourseRepositoryInterface $courseRepository */
        $courseRepository = app(CourseRepositoryInterface::class);
        $authData = $this->guildMemberAppService->registerMember(
            new StudentNumber('B4079'),
            '山崎 好洋',
            $courseRepository->all()[0],
            new Gender(Gender::MALE),
            new MailAddress('b4079@oic.jp'),
            new LoginInfo(new MailAddress('b4079@oic.jp'), new PassWord('12345678'))
        );
        $this->actingAs($authData);
    }

    public function testSuccess()
    {
        $response = $this->post(route('update_guild_member'),[
            'name' => 'テスト太郎',
            'course_id' => '2',
            'gender' => 'female',
        ]);

        $response->assertStatus(200);
    }

    /**
     * 存在しないコースがリクエストされた場合
     */
    public function testCourseFail()
    {
        $response = $this->post(route('update_guild_member'),[
            'name' => 'テスト太郎',
            'course_id' => 'aaaaaa',
            'gender' => 'female',
        ]);

        $response->assertStatus(304);
    }
}