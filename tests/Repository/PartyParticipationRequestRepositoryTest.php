<?php
/**
 * Created by PhpStorm.
 * User: yamagon
 * Date: 2017/12/22
 * Time: 14:27
 */

namespace Tests\Repository;


use App\Domain\GuildMember\ValueObjects\StudentNumber;
use App\Domain\PartyParticipationRequest\PartyParticipationRequest;
use App\Domain\PartyParticipationRequest\RepositoryInterface\PartyParticipationRequestRepositoryInterface;
use Tests\TestCase;

class PartyParticipationRequestRepositoryTest extends TestCase
{
    /* @var PartyParticipationRequestRepositoryInterface $repo */
    protected $repo;
    protected $partyParticipationRequest = [];


    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repo = app(PartyParticipationRequestRepositoryInterface::class);

        $this->partyParticipationRequest[0] = new PartyParticipationRequest("aaaa", "bbbb", "cccc", new StudentNumber("B4999"));
        $this->partyParticipationRequest[1] = new PartyParticipationRequest("abbb", "bccc", "cccc", new StudentNumber("B4888"));
        $this->partyParticipationRequest[2] = new PartyParticipationRequest("accc", "bbbb", "cccc", new StudentNumber("B4888"));
    }

    public function testSave()
    {
        $this->repo->save($this->partyParticipationRequest[0]);
        $this->assertTrue(true);
    }

    public function testFindById()
    {
        $this->repo->save($this->partyParticipationRequest[0]);
        $this->repo->save($this->partyParticipationRequest[1]);
        $this->repo->save($this->partyParticipationRequest[2]);

        $findPartyParticipationRequest = $this->repo->findById("aaaa");
        $this->assertTrue($findPartyParticipationRequest->partyId() === "bbbb");
        $this->assertTrue($findPartyParticipationRequest->wantedRoleId() === "cccc");
        $this->assertTrue($findPartyParticipationRequest->guildMemberId() == new StudentNumber("B4999"));

        // 指定したIDがなかった場合にnullが帰るかどうか
        $this->assertTrue($this->repo->findById('hoge') === null);
    }

    public function testFindListByStudentNumber()
    {
        $this->repo->save($this->partyParticipationRequest[0]);
        $this->repo->save($this->partyParticipationRequest[1]);
        $this->repo->save($this->partyParticipationRequest[2]);

        $findPartyParticipationRequestList = $this->repo->findListByStudentNumber(new StudentNumber("B4888"));
        $this->assertTrue($findPartyParticipationRequestList[0]->id() === "abbb");
        $this->assertTrue($findPartyParticipationRequestList[0]->partyId() === "bccc");
        $this->assertTrue($findPartyParticipationRequestList[0]->wantedRoleId() === "cccc");

        // 指定したIDがなかった場合にnullが帰るかどうか
        $this->assertTrue($this->repo->findListByStudentNumber(new StudentNumber("B0000")) === []);
    }

    public function testFindListByPartyId()
    {
        $this->repo->save($this->partyParticipationRequest[0]);
        $this->repo->save($this->partyParticipationRequest[1]);
        $this->repo->save($this->partyParticipationRequest[2]);

        $findPartyParticipationRequestList = $this->repo->findListByPartyId("bbbb");
        $this->assertTrue($findPartyParticipationRequestList[0]->id() === "aaaa");
        $this->assertTrue($findPartyParticipationRequestList[0]->wantedRoleId() === "cccc");
        $this->assertTrue($findPartyParticipationRequestList[0]->guildMemberId() == new StudentNumber("B4999"));

        // 指定したIDがなかった場合にnullが帰るかどうか
        $this->assertTrue($this->repo->findListByPartyId('hoge') === []);
    }

    public function testAll()
    {
        $this->repo->save($this->partyParticipationRequest[0]);
        $this->repo->save($this->partyParticipationRequest[1]);
        $this->repo->save($this->partyParticipationRequest[2]);

        $allPartyParticipationRequest = $this->repo->all();

        for ($i=0;$i<3;$i++)
        {
            $this->assertTrue($allPartyParticipationRequest[$i]->id() == $this->partyParticipationRequest[$i]->id());
            $this->assertTrue($allPartyParticipationRequest[$i]->wantedRoleId() == $this->partyParticipationRequest[$i]->wantedRoleId());
            $this->assertTrue($allPartyParticipationRequest[$i]->guildMemberId() == $this->partyParticipationRequest[$i]->guildMemberId());
        }
    }
}