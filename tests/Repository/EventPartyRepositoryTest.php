<?php
/**
 * Created by PhpStorm.
 * User: user
 * Date: 2018/02/12
 * Time: 7:24
 */

namespace Tests\Repository;


use App\ApplicationService\EventPartyAppService;
use App\Domain\Event\ValueObjects\EventId;
use App\Domain\EventParty\EventParty;
use App\Domain\EventParty\EventPartyRepositoryInterface;
use Tests\TestCase;

class EventPartyRepositoryTest extends TestCase
{
    /* @var EventPartyRepositoryInterface $repo */
    protected $repo;
    /* @var EventParty $eventParty */
    private $eventParty;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repo = app(EventPartyRepositoryInterface::class);

        $this->eventParty = new EventParty(
            new EventId('aaaa'),
            'bbbb'
        );
        $this->repo->save($this->eventParty);
    }

    public function testSave()
    {
        $this->assertTrue($this->repo->save($this->eventParty));
    }

    public function testFindByEventId()
    {
        $eventPartyCollection = $this->repo->findByEventId($this->eventParty->eventId());
        $_eventParty = clone $this->eventParty;

        $result = array_filter($eventPartyCollection, function(EventParty $eventParty) use($_eventParty){
            return $eventParty->eventId()->code() === $_eventParty->eventId()->code() &&
                    $eventParty->partyId() === $_eventParty->partyId();
        });

        $this->assertTrue(count($result) > 0);
    }

    public function testFindByEventIdAndPartyId()
    {
        $result = $this->repo->findByEventIdAndPartyId($this->eventParty->eventId(), $this->eventParty->partyId());
        $this->assertTrue($result->eventId()->code() === $this->eventParty->eventId()->code() &&
            $result->partyId() === $this->eventParty->partyId());
    }
}
