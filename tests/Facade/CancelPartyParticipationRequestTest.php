<?php

use App\Domain\Party\RepositoryInterface\PartyRepositoryInterface;
use App\Domain\PartyParticipationRequest\RepositoryInterface\PartyParticipationRequestRepositoryInterface;
use App\Presentation\PartyParticipationRequestFacade;

/**
 * Created by PhpStorm.
 * User: yamagon
 * Date: 2018/01/14
 * Time: 15:27
 */

class CancelPartyParticipationRequestTest extends \Tests\TestCase
{
    /* @var PartyParticipationRequestFacade $partyParticipationRequestFacade*/
    protected $partyParticipationRequestFacade;
    /* @var PartyParticipationRequestRepositoryInterface $partyParticipationRequestRepository */
    protected $partyParticipationRequestRepository;
    /* @var PartyRepositoryInterface $partyRepository */
    protected $partyRepository;

    protected $party;
    protected $guildMember;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->partyParticipationRequestFacade = app(PartyParticipationRequestFacade::class);
        $this->partyParticipationRequestRepository = app(PartyParticipationRequestRepositoryInterface::class);
        $this->partyRepository = app(PartyRepositoryInterface::class);
        $this->party = $this->sampleParty();
    }

    // パーティ参加申請をキャンセルした場合のテスト
    public function testCancelSuccess()
    {
        $this->party->addWantedFrame('1', 1);
        $this->partyRepository->save($this->party);
        $partyParticipationRequestId = $this->partyParticipationRequestFacade->sendPartyParticipationRequest($this->party->id(), "1", "B4999");

        $cancelResult = $this->partyParticipationRequestFacade->cancelPartyParticipationRequest($partyParticipationRequestId, "B4999");
        $deletePartyParticipationRequest = $this->partyParticipationRequestRepository->findById($partyParticipationRequestId);

        $this->assertTrue($cancelResult);
        $this->assertTrue(!$deletePartyParticipationRequest);
    }


    // パーティ参加申請をキャンセルしようとしたのが申請者ではなかった場合
    public function testGuildMemberIdFail()
    {
        $this->party->addWantedFrame('1', 1);
        $this->partyRepository->save($this->party);
        $partyParticipationRequestId = $this->partyParticipationRequestFacade->sendPartyParticipationRequest($this->party->id(), "1", "B4999");

        $cancelResult = $this->partyParticipationRequestFacade->cancelPartyParticipationRequest($partyParticipationRequestId, "B4000");
        $partyParticipationRequest = $this->partyParticipationRequestRepository->findById($partyParticipationRequestId);

        $this->assertFalse($cancelResult);
        $this->assertTrue($partyParticipationRequest->partyId() === $this->party->id());
        $this->assertTrue($partyParticipationRequest->guildMemberId()->code() === "B4999");
    }
}