<?php

use App\ApplicationService\PartyAppService;
use App\ApplicationService\PartyMemberAppService;
use App\Domain\Party\RepositoryInterface\PartyRepositoryInterface;
use App\Domain\PartyParticipationRequest\RepositoryInterface\PartyParticipationRequestRepositoryInterface;
use App\Domain\PartyParticipationRequest\ValueObjects\Reply;
use App\Presentation\PartyMemberFacade;
use App\Presentation\PartyParticipationRequestFacade;
use Tests\Sampler;

/**
 * Created by PhpStorm.
 * User: yamagon
 * Date: 2017/12/15
 * Time: 16:15
 */

class PartyMemberAssignTest extends \Tests\TestCase
{
    use Sampler;

    /* @var PartyAppService $PartyAppService*/
    protected $partyAppService;
    /* @var PartyMemberFacade $partyMemberFacade */
    protected $partyMemberFacade;
    /* @var PartyParticipationRequestFacade $partyParticipationRequestFacade */
    protected $partyParticipationRequestFacade;
    /* @var PartyRepositoryInterface $partyRepoitory */
    protected $partyRepoitory;
    /* @var PartyParticipationRequestRepositoryInterface $partyParticipationRequestRepository */
    protected $partyParticipationRequestRepository;
    protected $party;
    protected $partyManager;
    protected $partyMember;
    protected $partyParticipationRequestId;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        //faker使う。普通に使う場合と同じ。
        $faker = Faker\Factory::create('ja_JP');
        $this->partyAppService = app(PartyAppService::class);
        $this->partyMemberAppService = app(PartyMemberAppService::class);
        $this->partyMemberFacade = app(PartyMemberFacade::class);
        $this->partyParticipationRequestFacade = app(PartyParticipationRequestFacade::class);
        $this->partyRepoitory = app(PartyRepositoryInterface::class);
        $this->partyParticipationRequestRepository = app(PartyParticipationRequestRepositoryInterface::class);
        $this->party = $this->sampleParty(['partyManagerId' => "B4000"]);
        $this->partyManager = $this->sampleGuildMember(['studentNumber' => "B4000"]);
        $this->partyMember = $this->sampleGuildMember(['studentNumber' => "B4999"]);
        $this->partyParticipationRequestId = $this->partyParticipationRequestFacade->sendPartyParticipationRequest($this->party->id(),'1', $this->partyMember->studentNumber()->code());
    }

    public function testSuccess()
    {
        $this->party->addWantedFrame('1',1);
        $this->partyRepoitory->save($this->party);
        $this->partyMemberFacade->assignPartyMember($this->party->id(), '1', "B4000", "B4999");
    }

    /**
     * @expectedException \Exception
     */
    public function testFailWantedFrame()
    {
        $this->partyRepoitory->save($this->party);

        $this->partyMemberFacade->assignPartyMember($this->party->id(), '1', "B4000", "B4999");
    }

    /**
     * @expectedException \Exception
     */
    public function testFailPartyManager()
    {
        $this->party->addWantedFrame('1',1);
        $this->partyRepoitory->save($this->party);

        $this->partyMemberFacade->assignPartyMember($this->party->id(), '1', "B4444", "B4999");
    }
}